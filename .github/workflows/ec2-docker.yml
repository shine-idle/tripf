name: Docker Multi-Stage Build and EC2 Deployment

on:
  push:
    branches: [ CI_CD ] # CI_CD 브랜치에 push된 경우 트리거

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 2. QEMU 설정 (Cross-platform 빌드 지원)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest

  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1. 첫 번째 EC2에 배포
      - name: Deploy to EC2-1
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST_1 }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
                -e DB_USER=${{ secrets.DB_USER }} \
                -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -e DB_URL=${{ secrets.DB_URL }} \
                -e GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }} \
                -e GOOGLE_OAUTH2_SECRET=${{ secrets.GOOGLE_OAUTH2_SECRET }} \
                -e NAVER_OAUTH2_CLIENT_ID=${{ secrets.NAVER_OAUTH2_CLIENT_ID }} \
                -e NAVER_OAUTH2_SECRET=${{ secrets.NAVER_OAUTH2_SECRET }} \
                -e KAKAO_OAUTH2_CLIENT_ID=${{ secrets.KAKAO_OAUTH2_CLIENT_ID }} \
                -e KAKAO_OAUTH2_SECRET=${{ secrets.KAKAO_OAUTH2_SECRET }} \
                -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
                -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
                -e MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
                -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
                -e GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
                -e S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} \
                -e S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} \
                -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
                -e S3_REGION=${{ secrets.S3_REGION }} \
                -e MONGO_HOST=${{ secrets.MONGO_HOST }} \
                -e MONGO_USER=${{ secrets.MONGO_USER }} \
                -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest

      # 2. 두 번째 EC2에 배포
      - name: Deploy to EC2-2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST_2 }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
                -e DB_USER=${{ secrets.DB_USER }} \
                -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -e DB_URL=${{ secrets.DB_URL }} \
                -e GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }} \
                -e GOOGLE_OAUTH2_SECRET=${{ secrets.GOOGLE_OAUTH2_SECRET }} \
                -e NAVER_OAUTH2_CLIENT_ID=${{ secrets.NAVER_OAUTH2_CLIENT_ID }} \
                -e NAVER_OAUTH2_SECRET=${{ secrets.NAVER_OAUTH2_SECRET }} \
                -e KAKAO_OAUTH2_CLIENT_ID=${{ secrets.KAKAO_OAUTH2_CLIENT_ID }} \
                -e KAKAO_OAUTH2_SECRET=${{ secrets.KAKAO_OAUTH2_SECRET }} \
                -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
                -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
                -e MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
                -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
                -e GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
                -e S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} \
                -e S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} \
                -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
                -e S3_REGION=${{ secrets.S3_REGION }} \
                -e MONGO_HOST=${{ secrets.MONGO_HOST }} \
                -e MONGO_USER=${{ secrets.MONGO_USER }} \
                -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest